install.packages("ape")
install.packages("phangorn")
install.packages("picante")
require(ape)
require(phangorn)
install.packages("phangorn")
source("http://bioconductor.org/bioLite.R")
install.packages("ape")
install.packages("phangorn")
require(ape)
require(phangorn)
x<-read.dna("mustelid_coI.fasta",format="fasta")
d<-dist.dna(x)
write.table(as.matrix(d),"distances.csv")
d
d2<-dist.dna(x, model="GTR")
tr.upgma<-upgma(d)
plot(tr.upgma)
tr.upgmar<-root(tr.upgma, outgroup="Melursus/1-601 urinus")
plot(tr.upgmar);nodelabels();add.scale.bar(length=0.001)
plot(tr.upgma,"f")
tr.nj<-nj(d)
plot(tr.nj)
plot(tr.nj,"p")
plot(tr.nj,"f")
plot(tr.nj,"p")
par(mfrow=c(1,2))
plot(tr.upgma,"f")
plot(tr.nj,"p")
par(mfrow=c(1,1))
dt.upgma<-cophentic(tr.upgma)
dt.upgma<-cophenetic(tr.upgma)
dmat<-as.matrix(d)
nms<-rownames(dmat)
dt.upgma<-dt.upgma[nms, nms]
d
dt.upgma<-as.dist(dt.upgma)
plot(dt.upgma-d,ylab="residuals", cex=0.5,main="UPGMA")
abline(h=0,lty=3)
tr.fast<-fastme.bal(d,nni=T,spr=T,tbr=T)
plot(tr.fast)
par(mfrow=c(2,2))
plot(tr.nj)
plot(tr.bionj)
plot.phylo(tr.bionj)
fit<-pml(tr.upgma,as.phyDat(x))
fit=optim.pml(fit,T)
plot(fit)
par(mfrow=c(1,1))
plot(fit)
set.seed(8)
bs<-bootstrap.pml(fit,bs=100,optNni=T)
treeBS<-plotBS(fit$tree, type="fan", bs)
treeBS<-plotBS(fit$tree, type="p", bs)
mt<-modelTest(as.phyDat(x),G=F,I=F)
dhky<-dist.dna(x,model="GTR")
orig<-evol.distinct(tr.upgma,type="fair.proportion")
orig
orig<-evol.distinct(tr.upgma,type="fair.proportion")orig
plot(tr.fast)
par(mfrow=c(2,2))
par(mar=rep(1,4))
plot(tr.upgma,"f")
plot(dt.upgma-d,ylab="residuals", cex=0.5,main="UPGMA")
plot(tr.fast)
plot.phylo(tr.bionj)
plot(tr.bionj)
plot(tr.nj)
plot(fit)
treeBS<-plotBS(fit$tree, type="fan", bs)
treeBS<-plotBS(fit$tree, type="p", bs)
View(mt)
View(dmat)
par(mfrow=c(1,1))
par(mar=rep(1,1))
plot(dt.upgma-d,ylab="residuals", cex=0.5,main="UPGMA")
source("http://bioconductor.org/biocLite.R")
biocLite(c("affy", "limma"))
library(GEOquery)
library(affy) #Affymetrix pre-processing
library(hgu133plus2.db)
library(annotate)
library(limma) #Two-colour pre-processing; differential expression
workingDir="/homes/rnmaconeghy/BS32010/Project/GCOS_Cel"
filenames <- c("ROS1-_9.CEL", "ROS1+_10.CEL", "ROS2-_11.CEL", "ROS2+_12.CEL", "ROS3-_13.CEL", "ROS3+_14", "ROS4-_15", "ROS4+_16")
samplenames <- c("ROS1-_9.CEL", "ROS1+_10.CEL", "ROS2-_11.CEL", "ROS2+_12.CEL", "ROS3-_13.CEL", "ROS3+_14", "ROS4-_15", "ROS4+_16")
targets <- c("minus", "plus", "minus", "plus", "minus", "plus", "minus", "plus")
#import data, describing the experimental design
phenodata<-as.data.frame(cbind(filenames,samplenames,targets))
#write.table(phenodata,paste(workingDir,))
celRAW <- ReadAffy(celfile.path=workingDir, phenoData=phenodata)
celfiles <- system.file("extdata", package = "arrays")
eset <- justRMA(phenoData = phenoData, celfile.path = celfiles)
.plotDensity <- function(exps, filename)
]
.plotDensity <- function(exps, filename)
{
pdf(filename)
d <- apply(exps,2,
function(x){
density(x)
})
xmax <- max(sapply(d,function(x)max(x$x)))
xmin <- min(sapply(d,function(x)min(x$x)))
ymax <- max(sapply(d,function(x)max(x$y)))
plot(0,pch='',ylab='',xlab='',
xlim=c(xmin,round(xmax+1)),ylim=c(0,ymax))
lapply(1:length(d),function(x) lines(d[[x]],col=x))
dev.off()
}
if(! require(affy)){
source("http://bioconductor.org/biocLite.R")
biocLite("affy")
require(affy)
}
library(GEOquery)
library(arrayQualityMetrics)
library(chicken.db)
library(chickenprobe)
library(annotate)
library(genefilter)
library(limma) #Two-colour pre-processing; differential expression
workingDir="/homes/rnmaconeghy/BS32010/Project/GCOS_Cel"
filenames <- c("ROS1-_9.CEL", "ROS1+_10.CEL", "ROS2-_11.CEL", "ROS2+_12.CEL", "ROS3-_13.CEL", "ROS3+_14", "ROS4-_15", "ROS4+_16")
samplenames <- c("ROS1-_9.CEL", "ROS1+_10.CEL", "ROS2-_11.CEL", "ROS2+_12.CEL", "ROS3-_13.CEL", "ROS3+_14", "ROS4-_15", "ROS4+_16")
targets <- c("minus", "plus", "minus", "plus", "minus", "plus", "minus", "plus")
#import data, describing the experimental design
phenodata<-as.data.frame(cbind(filenames,samplenames,targets))
#write.table(phenodata,paste(workingDir,))
celRAW <- ReadAffy(celfile.path=workingDir, phenoData=phenodata)
.plotDensity <- function(exps, filename)
{
pdf(filename)
d <- apply(exps,2,
function(x){
density(x)
})
xmax <- max(sapply(d,function(x)max(x$x)))
xmin <- min(sapply(d,function(x)min(x$x)))
ymax <- max(sapply(d,function(x)max(x$y)))
plot(0,pch='',ylab='',xlab='',
xlim=c(xmin,round(xmax+1)),ylim=c(0,ymax))
lapply(1:length(d),function(x) lines(d[[x]],col=x))
dev.off()
}
.doPLM <- function(celRAW)
{
pdf("celRAWqc.pdf")
celRAWqc <- fitPLM(celRAW)
image(celRAWqc, which=1, add.legend=TRUE)
image(celRAWqc, which=4, add.legend=TRUE)
RLE(celRAWqc, main="RLE")
NUSE(celRAWqc, main="NUSE")
dev.off()
}
.doCluster <- function(celRMA)
{
eset <- exprs(celRMA)
distance <- dist(t(eset), method="maximum")
clusters <- hclust(distance)
plot(clusters)
}
.doFilter <- function(celRMA)
{
celfiles.filtered <- nsFilter(celRMA,
require.entrez=FALSE,
remove.dupEntrez=FALSE)
}
.doDE <- function(eset)
{
samples <- eset$targets
samples <- as.factor(samples)
design <- model.matrix(~0 + samples)
colnames(design) <- c("plus", "minus")
fit <- lmFit(exprs(eset), design)
ebFit <- eBayes(fit)
ttab <- topTable(ebFit, number=10000, coef=1)
annotation <- as.data.frame(select(chicken.db,
rownames(topTable),
c("ENSEMBL", "SYMBOL")))
colnames(annotation) <- c("probeId", "ensemblId", "geneSymbol")
results <- merge(annotation, topTable,by.x="probeId",by.y="row.names")
head(results)
write.table(results, "results.txt", sep="\t", quote=FALSE)
return(results)
}
if(!exists("celResults"))
{
eset <- exprs(celRAW)
celRMA <- rma(celRAW)
.plotDensity(log2(exprs(celRAW)),"densityRAW.pdf")
.plotDensity(log2(exprs(celRMA)),"densityRMA.pdf")
celFilt <- .doFilter(celRMA)
celResults <- .doDE(celFilt$eset)
}
setwd("~/BS32010/Project")
View(phenodata)
View(mapCdfName)
View(eset)
require(DESeq2)
require(RCurl)
require(biomaRt)
remoteFile <- getURL(paste0("http://www.compbio.dundee.ac.uk/",
"user/pschofield/Teaching/Bioinformatics/",
"Data/RNAseqCounts.txt"))
dat<-read.delim("/usr/local/share/BS32010/expression/data/RNAseqCounts.txt",
sep="\t",skip=1,head=T)
geneCounts<-read.delim(textConnection(remoteFile),
head=T, sep="\t",skip=1)
nonZeroCounts<-geneCounts[rowSums(geneCounts[,7:12])>0,7:12]
treatments <- as.factor(substr(colnames(nonZeroCounts),1,1))
dds<- DESeqDataSetFromMatrix(as.matrix(nonZeroCounts),
as.data.frame(treatments),
design=~treatments)
dds$treatments <- relevel(dds$treatments, "U")
dds <-DESeq(dds)
res <- results(dds)
head(res)
mcols(res)
sum( res$pvalue < 0.05, na.rm=TRUE)
table( is.na(res$pvalue) )
sum( res$padj < 0.1, na.rm=TRUE )
resSig <- res[ which(res$padj <0.1 ), ]
head( resSig[ order( resSig$log2FoldChange ), ] )
tail( resSig[ order( resSig$log2FoldChange ), ] )
plot(attr(res,"filterNumRej"),type="b", ylab="number of rejections")
#plots the number of rejected tests less than 0.1 plotted over theta, the quantiles of the filter statistic
sum(res$padj < 0.1, na.rm=TRUE)
resNoFilt <- results(dds, independentFiltering=FALSE)
sum(resNoFilt$padj < 0.1, na.rm=TRUE)
plotMA(dds, ylim = c(-2,2), main="DESeq2")
plotDispEsts(dds)
hist(res$pvalue, breaks=100)
write.csv(as.data.frame(res), file="results.csv")
#saves the results in a CSV file, which you can then load with Excel
colData(dds)
rld <- rlogTransformation(dds, blind=TRUE)
vsd <- varianceStabilizingTransformation(dds, blind=TRUE)
DEresults <- results(dds)
mart <- useMart (biomart="ENSEMBL_MART_ENSEMBL",
host="www.ensembl.org",
path="/biomart/martservice")
gg4 <- useDataset("ggallus_gene_ensembl", mart=mart)
annot <- getBM(attributes=c("ensembl_gene_id",
"external_gene_id",
"affy_chicken"),
filter="ensembl_gene_id",
values=rownames(DEresults),
mart=gg4)
#something is wrong as this gives 0 obs. of 3 variables
annotResults <- merge(annot,DEresults,
by.x="ensembl_gene_id",by.y="row.names")
#design<-model.matrix(~0 + sample)
#fit<-lmFit(eset,design),
#design(dds)<-formula(~type+condition),
#dds<-DESeq(dds),
View(annot)
